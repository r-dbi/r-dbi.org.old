<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on DBI for R</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on DBI for R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Maintaining DBI, 4/4</title>
      <link>/blog/dbi-3-4/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/dbi-3-4/</guid>
      <description>What is DBI? The {DBI} package (database interface) connects R to database management systems (DBMS). It is an interface that only offers a common interface. Connectivity to DBMS is established through dedicated backend packages such as RPostgres, RMariaDB, and RSQLite. Read the introductory tutorial to get started.
The current version of DBI is 1.1.2. A summary of recent developments in {DBI} and related packages is provided, see the three previous blog posts for earlier summaries.</description>
    </item>
    
    <item>
      <title>Maintaining DBI, 3/4</title>
      <link>/blog/dbi-3-3/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/dbi-3-3/</guid>
      <description>What is DBI? DBI stands for database interface. The DBI package connects R to database management systems (DBMS). The goal of DBI is to provide a common interface for database access, regardless of the specific underlying DBMS. DBI works with a variety of DBMS, such as Postgres, MariaDB, and SQLite, through dedicated backend packages. For first-time users I recommend starting with the new introductory tutorial.
The current version of DBI is 1.</description>
    </item>
    
    <item>
      <title>Maintaining DBI, 2/4</title>
      <link>/blog/dbi-3-2/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/dbi-3-2/</guid>
      <description>What is DBI? DBI stands for database interface, and DBI is a package for connecting to database management systems (DBMS). The goal of DBI is to provide a common interface for accessing a database, regardless of the specific underlying DBMS.
DBI works with a variety of DBMS, such as Postgres, MariaDB, and SQLite, allowing users to focus on the specifics of their project instead of setting up the infrastructure for data import and export.</description>
    </item>
    
    <item>
      <title>Maintaining DBI, 1/4</title>
      <link>/blog/dbi-3-1/</link>
      <pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/dbi-3-1/</guid>
      <description>Much earlier this year my proposal for the third R Consortium project for working on DBI has been accepted. DBI is a set of virtual functions declared in the DBI package. Communication with the database is implemented by DBI backends, packages that import DBI and implement its methods. A common interface is helpful for both users and backend implementers. Users, including package developers for DBMS-agnostic packages, need to memoize only one set of functions.</description>
    </item>
    
    <item>
      <title>Done “Establishing DBI”!?</title>
      <link>/blog/dbi-2-final/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/dbi-2-final/</guid>
      <description>The &amp;ldquo;Establishing DBI&amp;rdquo; project, funded by the R consortium, started about a year ago. It includes the completion of two new backends, RPostgres and RMariaDB, and a quite a few interface extensions and specifications. Learn more about DBI, R&amp;rsquo;s database interface, on https://r-dbi.org.
This blog post showcases only the visible changes, a substantial amount of work went into extending the DBI specification and making the three open-source database backends compliant to it.</description>
    </item>
    
    <item>
      <title>Connecting to open source databases</title>
      <link>/blog/rstudio-conf/</link>
      <pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/rstudio-conf/</guid>
      <description>Link to video Slides Full screen version</description>
    </item>
    
    <item>
      <title>Improving DBI: A Retrospect</title>
      <link>/blog/dbi-1-final/</link>
      <pubDate>Mon, 15 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/dbi-1-final/</guid>
      <description>The &amp;ldquo;Improving DBI&amp;rdquo; project, funded by the R consortium, started about a year ago. It includes
 the definition and implementation of a testable specification for DBI, making RSQLite fully compliant to the new specification.  Besides the established DBI and RSQLite packages, I have spent a lot of time on the new DBItest package. Final updates to these packages will be pushed to CRAN end of May this year, to give downstream maintainers some time to accommodate.</description>
    </item>
    
    <item>
      <title>Halfway through “Improving DBI”</title>
      <link>/blog/dbi-1-halfway/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/dbi-1-halfway/</guid>
      <description>In early 2016 the R Consortium partially accepted my “Improving DBI” proposal. An important part is the design and implementation of a testable DBI specification. Initially I also proposed to make three DBI backends to open-source databases engines (RSQLite, RMySQL, and RPostgres) compatible to the new DBI specification, but funding allows to work on only one DBI backend. I chose RSQLite for a number of reasons:
 It is a very important package, judging by the number of reverse CRAN and Bioconductor dependencies It’s easy to work with, because everything (including the database engine) is bundled with the package It seemed to be the most advanced package, closest to the (yet to be completed) DBI specification An informal Twitter poll supports this decision by a tiny margin  The project has reached an important milestone, with the release of RSQLite 1.</description>
    </item>
    
  </channel>
</rss>
